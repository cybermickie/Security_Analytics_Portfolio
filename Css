import React, { useState, useEffect, useCallback } from 'react';
import './styles.css';

const API_BASE_URL = 'http://localhost:5000';

const generateSessionId = () => {
    return 'user_' + Math.random().toString(36).substr(2, 9);
};

const App = () => {
    const [displayValue, setDisplayValue] = useState('0');
    const [expression, setExpression] = useState('');
    const [isDecimal, setIsDecimal] = useState(false);
    const [justCalculated, setJustCalculated] = useState(false);
    const [memory, setMemory] = useState(0);
    const [mode, setMode] = useState('basic');
    const [history, setHistory] = useState([]);
    const [sessionId] = useState(generateSessionId());
    const [currentView, setCurrentView] = useState('calculator'); // 'calculator' or 'converter'

    const [activeConversion, setActiveConversion] = useState(null);
    const [conversionValue, setConversionValue] = useState('');
    const [units, setUnits] = useState({ categories: [], units: {} });
    const [fromUnit, setFromUnit] = useState('');
    const [toUnit, setToUnit] = useState('');

    const fetchHistory = useCallback(async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/history?session_id=${sessionId}`);
            const data = await response.json();
            if (data.history) {
                setHistory(data.history);
            }
        } catch (error) {
            console.error('Failed to fetch history:', error);
        }
    }, [sessionId]);

    const fetchUnits = async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/units`);
            const data = await response.json();
            setUnits(data);
            if (data.categories.length > 0) {
                const defaultCategory = data.categories[0];
                setActiveConversion(defaultCategory);
                const defaultUnits = data.units[defaultCategory];
                if (defaultUnits.length >= 2) {
                    setFromUnit(defaultUnits[0]);
                    setToUnit(defaultUnits[1]);
                }
            }
        } catch (error) {
            console.error('Failed to fetch units:', error);
        }
    };

    useEffect(() => {
        fetchUnits();
        fetchHistory();
    }, [fetchHistory]);

    const handleDigitClick = (digit) => {
        if (justCalculated) {
            setDisplayValue(digit);
            setExpression(digit);
            setJustCalculated(false);
        } else {
            if (displayValue === '0' && digit !== '.') {
                setDisplayValue(digit);
                setExpression(prev => prev + digit);
            } else {
                if (digit === '.' && isDecimal) return;
                if (digit === '.') setIsDecimal(true);
                setDisplayValue(prev => prev + digit);
                setExpression(prev => prev + digit);
            }
        }
    };

    const handleOperation = async (op) => {
        if (op === 'AC') {
            setDisplayValue('0');
            setExpression('');
            setIsDecimal(false);
            setJustCalculated(false);
            return;
        }
        
        if (op === '=') {
            try {
                const response = await fetch(`${API_BASE_URL}/calculate`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ expression, session_id: sessionId, memory, degree_mode: true }),
                });
                const data = await response.json();
                if (data.result !== undefined) {
                    setDisplayValue(data.result.toString());
                    setExpression(data.raw.toString());
                    setIsDecimal(data.result.toString().includes('.'));
                    setJustCalculated(true);
                    fetchHistory();
                } else {
                    setDisplayValue('Error');
                    setExpression('');
                }
            } catch (error) {
                setDisplayValue('Error');
                setExpression('');
            }
            return;
        }

        const lastChar = expression.slice(-1);
        const isOperator = ['+', '-', '×', '÷'].includes(lastChar);
        
        if (isOperator && ['+', '-', '×', '÷'].includes(op)) {
            setExpression(expression.slice(0, -1) + op);
        } else {
            setExpression(prev => prev + op);
        }
        setDisplayValue(op);
        setJustCalculated(false);
        setIsDecimal(false);
    };

    const handleMemory = async (op) => {
        const value = parseFloat(displayValue);
        const endpoint = `${API_BASE_URL}/memory`;
        let body = { operation: op, current_memory: memory };
        if (op === 'M+' || op === 'M-') {
            body.value = value;
        }

        try {
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body),
            });
            const data = await response.json();
            if (op === 'MR') {
                setDisplayValue(data.memory.toString());
                setExpression(data.memory.toString());
            } else {
                setMemory(data.memory);
            }
        } catch (error) {
            console.error('Memory operation failed:', error);
        }
    };

    const handleConversion = async () => {
        if (!activeConversion || !fromUnit || !toUnit) return;
        try {
            const response = await fetch(`${API_BASE_URL}/convert`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    category: activeConversion,
                    value: parseFloat(conversionValue),
                    from_unit: fromUnit,
                    to_unit: toUnit,
                }),
            });
            const data = await response.json();
            if (data.result !== undefined) {
                setDisplayValue(data.result.toString());
            } else {
                setDisplayValue('Error');
            }
        } catch (error) {
            setDisplayValue('Error');
        }
    };

    const handleScientificFunc = (func) => {
        const lastChar = expression.slice(-1);
        let newExpr = expression;

        if (['+', '-', '×', '÷'].includes(lastChar)) {
             newExpr += func;
        } else {
             newExpr = expression + func + '(';
        }

        setExpression(newExpr);
        setDisplayValue(func);
    };

    const handleParentheses = (paren) => {
      setExpression(prev => prev + paren);
      setDisplayValue(prev => prev + paren);
    };

    const renderButtons = () => {
        const basicButtons = [
            ['AC', '+-', '%', '÷'],
            ['7', '8', '9', '×'],
            ['4', '5', '6', '-'],
            ['1', '2', '3', '+'],
            ['0', '.', '=']
        ];

        const scientificButtons = [
            ['(', ')', 'MC', 'MR'],
            ['sin', 'cos', 'tan', 'C'],
            ['asin', 'acos', 'atan', 'Exp'],
            ['pi', 'e', 'log', 'ln'],
            ['sqrt', 'cbrt', 'x^y', 'x^2']
        ];

        const basicGrid = basicButtons.map((row, rowIndex) => (
            <div key={rowIndex} className="button-row">
                {row.map(label => {
                    const buttonClass = `button ${['AC', '+-', '%', '÷', '×', '-', '+', '='].includes(label) ? 'orange' : ''} ${label === '0' ? 'wide' : ''}`;
                    return (
                        <button
                            key={label}
                            className={buttonClass}
                            onClick={() => {
                                if (!isNaN(label) || label === '.') {
                                    handleDigitClick(label);
                                } else if (['+', '-', '×', '÷', '='].includes(label)) {
                                    handleOperation(label);
                                } else if (['AC', '+-', '%'].includes(label)) {
                                    handleOperation(label);
                                }
                            }}
                        >
                            {label}
                        </button>
                    );
                })}
            </div>
        ));

        const scientificGrid = scientificButtons.map((row, rowIndex) => (
            <div key={rowIndex} className="button-row">
                {row.map(label => {
                    return (
                        <button
                            key={label}
                            className="button light-grey"
                            onClick={() => {
                                if (label === '(' || label === ')') {
                                    handleParentheses(label);
                                } else if (label === 'MC' || label === 'MR') {
                                    handleMemory(label);
                                } else if (label === 'C') {
                                     // Clear last digit
                                } else {
                                    handleScientificFunc(label);
                                }
                            }}
                        >
                            {label}
                        </button>
                    );
                })}
            </div>
        ));

        return (
            <>
                {mode === 'scientific' && scientificGrid}
                {basicGrid}
            </>
        );
    };
    
    return (
        <div className="main-container">
            <div className="top-bar">
                <button 
                    className={`view-toggle-btn ${currentView === 'calculator' ? 'active' : ''}`} 
                    onClick={() => setCurrentView('calculator')}>
                    <span role="img" aria-label="calculator">🧮</span>
                </button>
                <button 
                    className={`view-toggle-btn ${currentView === 'converter' ? 'active' : ''}`} 
                    onClick={() => setCurrentView('converter')}>
                    <span role="img" aria-label="converter">🔄</span>
                </button>
            </div>

            {currentView === 'calculator' && (
                <div className="calculator">
                    <div className="display-container">
                        <div className="expression">{expression}</div>
                        <div className="display">{displayValue}</div>
                    </div>
                    
                    <div className="mode-toggle">
                        <button onClick={() => setMode('basic')} className={mode === 'basic' ? 'active' : ''}>Basic</button>
                        <button onClick={() => setMode('scientific')} className={mode === 'scientific' ? 'active' : ''}>Scientific</button>
                    </div>

                    <div className="button-container">
                        {renderButtons()}
                    </div>
                    <HistoryPanel />
                </div>
            )}

            {currentView === 'converter' && (
                <div className="converter-panel">
                    <h3>Unit & Currency Converter</h3>
                    <div className="conversion-controls">
                        <select
                            value={activeConversion}
                            onChange={(e) => {
                                const newCategory = e.target.value;
                                setActiveConversion(newCategory);
                                const newUnits = units.units[newCategory] || [];
                                if (newUnits.length >= 2) {
                                    setFromUnit(newUnits[0]);
                                    setToUnit(newUnits[1]);
                                }
                            }}
                        >
                            {units.categories.map(cat => (
                                <option key={cat} value={cat}>{cat}</option>
                            ))}
                        </select>
                        <input
                            type="number"
                            value={conversionValue}
                            onChange={(e) => setConversionValue(e.target.value)}
                            placeholder="Value to convert"
                        />
                        <select value={fromUnit} onChange={(e) => setFromUnit(e.target.value)}>
                            {(units.units[activeConversion] || []).map(unit => (
                                <option key={unit} value={unit}>{unit}</option>
                            ))}
                        </select>
                        <span>to</span>
                        <select value={toUnit} onChange={(e) => setToUnit(e.target.value)}>
                            {(units.units[activeConversion] || []).map(unit => (
                                <option key={unit} value={unit}>{unit}</option>
                            ))}
                        </select>
                        <button onClick={handleConversion}>Convert</button>
                        <div className="conversion-result">
                            <span className="result-label">Result:</span> {displayValue}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

const HistoryPanel = () => {
    //... (Your HistoryPanel component)
    return (
        <div className="history-panel">
            <h3>History</h3>
            <div className="history-list">
                {history.length > 0 ? (
                    history.map((item, index) => (
                        <div key={index} className="history-item">
                            <div className="history-expr">{item.expression}</div>
                            <div className="history-result"> = {item.result}</div>
                        </div>
                    ))
                ) : (
                    <div className="history-empty">No history yet.</div>
                )}
            </div>
        </div>
    );
};

export default App;
