// app.js

document.addEventListener('DOMContentLoaded', () => {

    const API_URL = 'http://localhost:5000'; // Change to your API's URL in production
    let currentExpression = '';
    let currentResult = '0';
    let memory = 0;
    let degreeMode = true;
    let currentCategory = 'length';
    let sessionId = sessionStorage.getItem('sessionId');

    // Initialize a session ID if one doesn't exist
    if (!sessionId) {
        sessionId = crypto.randomUUID();
        sessionStorage.setItem('sessionId', sessionId);
    }

    const displayElement = document.getElementById('display');
    const modeSwitchElement = document.getElementById('mode-switch');
    const clearButton = document.getElementById('clear-button');
    const buttons = document.querySelectorAll('button');

    // Update the display with the current expression or result
    function updateDisplay(value) {
        displayElement.value = value;
    }

    // Set a new expression and clear the result
    function setExpression(expr) {
        currentExpression = expr;
        currentResult = '0';
        updateDisplay(currentExpression);
    }

    // Handle API errors
    function handleError(error) {
        console.error('API Error:', error);
        currentResult = 'Error';
        updateDisplay('Error');
    }

    // API call to calculate an expression
    async function calculate() {
        if (!currentExpression.trim()) {
            return;
        }
        try {
            const response = await fetch(`${API_URL}/calculate`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    expression: currentExpression,
                    degree_mode: degreeMode,
                    memory: memory,
                    session_id: sessionId
                }),
            });
            const data = await response.json();
            if (response.ok) {
                currentResult = data.result;
                updateDisplay(currentResult);
                currentExpression = String(data.raw); // Keep raw result for next calculation
            } else {
                handleError(data.error);
            }
        } catch (error) {
            handleError(error.message);
        }
    }

    // API call for unit conversions
    async function convert() {
        // Example: Assume a button click or form submission provides category, from, to, and value
        try {
            const response = await fetch(`${API_URL}/convert`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    category: 'length', // Example, would be dynamic
                    from_unit: 'm', // Example
                    to_unit: 'ft', // Example
                    value: currentExpression
                }),
            });
            const data = await response.json();
            if (response.ok) {
                currentResult = data.result;
                updateDisplay(currentResult);
                setExpression(String(currentResult));
            } else {
                handleError(data.error);
            }
        } catch (error) {
            handleError(error.message);
        }
    }

    // API call for memory operations
    async function memoryOperation(operation) {
        try {
            const response = await fetch(`${API_URL}/memory`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    operation: operation,
                    value: parseFloat(currentExpression) || 0,
                    current_memory: memory
                }),
            });
            const data = await response.json();
            if (response.ok) {
                if (operation === 'MR') {
                    setExpression(String(data.memory));
                }
                memory = data.memory;
            } else {
                handleError(data.error);
            }
        } catch (error) {
            handleError(error.message);
        }
    }

    // Event listeners for all buttons
    buttons.forEach(button => {
        button.addEventListener('click', () => {
            const value = button.dataset.value;
            const type = button.dataset.type;

            if (type === 'number' || type === 'operator' || type === 'scientific' || type === 'parenthesis' || type === 'constant') {
                if (currentResult !== '0' && currentResult !== 'Error' && type !== 'operator') {
                    setExpression(''); // Start new calculation if result is displayed
                }
                setExpression(currentExpression + value);
            } else if (type === 'equals') {
                calculate();
            } else if (type === 'clear') {
                // AC (All Clear) and DEL (Delete) logic
                if (value === 'AC') {
                    setExpression('');
                    currentResult = '0';
                    updateDisplay('0');
                    memory = 0; // Clear memory on AC
                } else if (value === 'DEL') {
                    setExpression(currentExpression.slice(0, -1));
                }
            } else if (type === 'memory') {
                memoryOperation(value);
            } else if (type === 'mode') {
                // Toggle between Deg/Rad
                degreeMode = !degreeMode;
                modeSwitchElement.textContent = degreeMode ? 'DEG' : 'RAD';
            }
        });
    });

    // Initial display
    updateDisplay(currentResult);
});
